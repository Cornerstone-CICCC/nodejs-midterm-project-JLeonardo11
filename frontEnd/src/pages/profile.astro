---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <main>
      <div class="profile" style="display: none;">

    <div id="container"> 
    <h1><span id="username"></span>'s Profile</h1>
    <div id="profilePic">
      <img src="/spitfire.jpg" alt="">
      
      <input type="file" accept="image/jpeg, image/png, image/jpg" id="file-path" class="user-file">
    </div>

    <p id="welcome">Welcome <span id="firstname"></span> <span id="lastname"></span>
<br>
      Are You Ready to Play?

    </p>

    <div class="play"><p>X</p><button onclick="window.location.href='/'" id="toGame">Play!</button><p>O</p></div>


    <div class="User_details"><p>X</p><button id="myBtn">Change User Details</button><p>O</p></div>

    <button <button onclick="window.location.href='/logout'" id="logout" >Log Out</button>
  
  <!-- Trigger/Open The Modal -->

<!-- The Modal -->
<div id="myModal" class="modal">

  <!-- Modal content -->
  <div class="modal-content">
    <span class="close">&times;</span>
    <div>
        <form id="EditUsername">
            <label>
                New Username:
                <input id="usernameInput" name="username" placeholder="Enter username" required/>
            </label>
            <label>
                New Password:
                <input id="passwordInput" type="password" name="password" placeholder="Enter password" required/>
            </label>
            <input type="hidden" name="id" id="editUserId">
            <button type="submit" id="ChangeName" >save</button>
        </form>

    </div> 
 </div>

</div>
</div>
</div>
</main>
  
</Layout>

<script>

  const profilePic = document.querySelector("#profilePic img") as HTMLImageElement
  const userFile = document.querySelector(".user-file") as HTMLInputElement | null;

  if (userFile) {
    userFile.onchange = function (){
      if (userFile.files && userFile.files[0]) {
        profilePic.src = URL.createObjectURL(userFile.files[0]);
      }
    }
  }

    

const modal = document.getElementById("myModal") as HTMLFormElement;

// Get the button that opens the modal
const btn = document.getElementById("myBtn") as HTMLFormElement;

// Get the <span> element that closes the modal
const span = document.getElementsByClassName("close")[0] as HTMLElement;

// When the user clicks on the button, open the modal
btn.onclick = function() {
  modal.style.display = "block";
}

// When the user clicks on <span> (x), close the modal
span.onclick = function() {
  modal.style.display = "none";
}

// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}



  const profile = document.querySelector('.profile') as HTMLDivElement

  const checkAuth = async () => {
    const res = await fetch(`http://localhost:3600/users/check-auth`, {
      method: "GET",
      credentials: "include"
    })
    if (!res.ok) {
      window.location.href = "/login"
      return
    }
    const data = await res.json()
    profile.style.display = "block";
    (document.querySelector('#editUserId') as HTMLInputElement).value = data.id;

    (profile.querySelector('#username') as HTMLSpanElement).innerHTML = data.username;
    (profile.querySelector('#firstname') as HTMLSpanElement).innerHTML = data.firstname;
    (profile.querySelector('#lastname') as HTMLSpanElement).innerHTML = data.lastname;

    
  }

  checkAuth()
  

  const form = document.querySelector('#EditUsername') as HTMLFormElement

form.addEventListener('submit', async (e) =>{
    e.preventDefault()
    const formData = new FormData(e.target as HTMLFormElement)
    const formOBJ = Object.fromEntries(formData.entries())
  const res = await fetch(`http://localhost:3600/users/update`, {
    method: "PUT",
    credentials: "include",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(formOBJ),
  })

  if (!res.ok){
    console.error("Failed to update user");
    return
}
window.location.href = "/profile"
    
  });
</script>


<style>
  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@100;400;700&display=swap');

* {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    user-select: none;
    color: white;
}



  
main{
  background-image: url('https://cigars.roku.com/v1/http%3A%2F%2Fimage.roku.com%2Fw%2Frapid%2Fimages%2Foem-spotlight%2F0e000750-a24a-4c0c-a792-c11d152effaf.jpg');
   background-size: cover;
  height: 100vh;
    width:100vw;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    overflow: hidden;
      }
#container{
  display: flex;
text-decoration: none;
height: 100vh;
width: 50vh;
    align-items: center;
    align-content: center;
    flex-wrap: nowrap;
    flex-direction: column;
    backdrop-filter: blur(50px);
    justify-content: space-evenly;
  text-align: center;}

#profilePic{
  width:10rem;
  height:10rem;
  border-radius: 50%;
  background-color: cyan;
  cursor:pointer;
}
p{
  font-size: 2rem;
}
#firstname{
  color: red;
  
}
#lastname{
  color: blue;
}

#logout{
    border-radius: 8px;
    cursor: pointer;
    background-color: rgb(255, 0, 212);
    border-radius: 24px ;
    width: 14rem;
    height: 4rem ;
    border: 0px;
    font-size: 2em; 
    transition: 0.3s;
    margin-top: 2rem;
    text-decoration: none;
    color: white;
}

#logout:hover{
  background-color: white;
  color:rgb(255, 0, 212);
}



    /* The Modal (background) */
.modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
  backdrop-filter: blur(80px);

}
#EditUsername{
  display: flex;
    flex-direction: column;
}
#usernameInput{
      color: black;

}
#passwordInput{
  color: black;

}

#myBtn{
  border-radius: 8px;
  border: none;
  background-color: black;
  cursor: pointer;
  transition: 0.3s;
  color: white;
}

#toGame{
  border-radius: 8px;
    background-color: red;
    border-radius: 24px ;
    width: 14rem;
    height: 4rem ;
    border: 0px;
    font-size: 2em;
    cursor: pointer;
transition: 0.3s;
color: white;
}

#toGame:hover{
  color:red;
   background-color: white;
   scale:1.2;
   border: 1px solid red;
   
}
.play{
  display: flex;
  gap: 2rem;
}
.play p:nth-child(1){
  font-size: 2rem;
  color: red;

}
.play p:nth-of-type(2){
  font-size: 2rem;
  color: blue;

}

#myBtn:hover{
  border-radius: 8px;
  border: none;
  color: black;
  background-color: white;
  cursor: pointer;
}
.User_details{
  display: flex;
  gap: 2rem;
}
.User_details p:nth-child(1){
  font-size: 2rem;
  color: red;

}
.User_details p:nth-of-type(2){
  font-size: 2rem;
  color: blue;

}

/* Modal Content/Box */
.modal-content {
  backdrop-filter: blur(80px);
    margin: 15% auto; /* 15% from the top and centered */
  padding: 20px;
  border: 2px solid rgb(255, 0, 212);
  width: 80%; /* Could be more or less, depending on screen size */
}

/* The Close Button */
.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

#profilePic {
  width: 10rem;
  height: 10rem;
  border-radius: 50%;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  cursor: pointer;
  background-color: #ccc; /* Fallback in case no image is uploaded */
}

#profilePic img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%;
}

#profilePic input[type="file"] {
  position: absolute;
  width: 100%;
  height: 100%;
  opacity: 0;
  cursor: pointer;
}

#ChangeName{
  background-color: black;
  border: none;
  margin-top: 1rem;
  cursor:pointer;
  transition: 0.3s;
}
#ChangeName:hover{
background-color: white;
color:black

}



@media (max-width: 768px) {
    #container {
        padding: 1rem;
    }

    p {
        font-size: 1.5rem;
    }

    #logout, #toGame {
        width: 12rem;
        font-size: 1.5rem;
    }

    .play p {
        font-size: 1.5rem;
    }

    .User_details p {
        font-size: 1.5rem;
    }

    #profilePic {
        width: 8rem;
        height: 8rem;
    }

    #profilePic img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 50%;
    }
    .modal-content{
      width: 50%;
    }
}

/* For extra small devices like mobile phones */
@media (max-width: 480px) {
    #container {
        padding: 0.5rem;
    }

    p {
        font-size: 1.2rem;
    }

    #logout, #toGame {
        width: 10rem;
        font-size: 1.2rem;
    }

    .play p {
        font-size: 1.2rem;
    }

    .User_details p {
        font-size: 1.2rem;
    }

    #profilePic {
        width: 6rem;
        height: 6rem;
    }
}
</style>